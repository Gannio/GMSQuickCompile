<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWindow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
enum e_EditorMenu
{
    X,Y,Width,Height,Name,SpriteIndex,ImageIndex
    
}

name = "";

dir = "";

hangMargin = 96;

isHiding = true;

//xPos = x;

width = 32;
height = 32;

buttons = array_create(0);

xPos = 0;
yPos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step event called by the editor in order to override it's own functions.
var mouseX = window_mouse_get_x();
var mouseY = window_mouse_get_y();

isHiding = !point_in_rectangle(mouseX,mouseY,xPos,yPos,xPos+width,yPos+height);
if (!isHiding)
{
    with (objLevelEditor)
    {
        cancelRoomTouch = true;
    }
}
//show_debug_message(isHiding);
//show_debug_message(xPos);


var windowW = window_get_width();
var windowH = window_get_height();

switch (dir)
{
    case "right":
        if (isHiding &amp;&amp; xPos &lt; windowW-hangMargin)
        {
            xPos = min(xPos+24,windowW-hangMargin)
            
        }
        else if (!isHiding &amp;&amp; xPos &gt; windowW-width)
        {
            //show_debug_message("A");
            xPos = max(xPos-24,windowW-width);
        }

    break;
    
    
}







//x = xPos;

for (var i = 0; i &lt; array_length_1d(buttons); i++)
{
    var button = buttons[i];
    //x = other.x + buttX;
    //y = other.y + buttY;
    var X = xPos+button[e_EditorMenu.X];
    var Y = yPos+button[e_EditorMenu.Y];
    if (point_in_rectangle(mouseX,mouseY,X,Y,X+button[e_EditorMenu.Width],Y+button[e_EditorMenu.Height]))
    {
        var buttName = button[e_EditorMenu.Name];
        with (parent)
        {
            eventName = other.name + "-" + buttName;
            event_user(2);
        }
    }
        
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch (name)
{
    case "objects":
        var names = makeArray("X","Y","XScale","YScale","XFlip","YFlip","Angle","Alpha","CC","Color")
        //Format of a button: X, Y, Width, Height, name, sprite, image. X and Y are *relative* to the menu.
        /*buttons = makeArray(
            makeArray(16,16,64,64,"X"),
            makeArray(16,16,64,64,"Y"),
            makeArray(16,16,64,64,"XScale"),
            makeArray(16,16,64,64,"YScale"),
            
            
            );*/
        buttons = -1;
        buttons[0] = makeArray(16,16,64,64,"OBJImage",sprWindow,0);
        
        for (var i = 0; i &lt; array_length_1d(names); i++)
        {
            buttons[i+1] = makeArray(16+(i%2)*128,16+64+floor(i/2)*64,128,64,names[i],sprite_index,image_index);
        }
        
        
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sprite_index,0,xPos,yPos,width/32,height/32,image_angle,image_blend,image_alpha);

draw_set_halign(fa_middle);
draw_set_valign(fa_center);

var vals = array_create(0);
switch (name)
{
    case "objects":
        
        with (objLevelEditor)
        {
            with (selectedObject)
            {
                vals[0] = x;
                vals[1] = y;
                vals[2] = image_xscale;
                vals[3] = image_yscale;
                vals[4] = image_angle;
                vals[5] = image_alpha;
                vals[6] = image_blend;
                vals[7] = sprite_index;
            }
        }
    break;
}
for (var i = 0; i &lt; array_length_1d(buttons); i++)
{
    var button = buttons[i];
    draw_sprite_ext(button[e_EditorMenu.SpriteIndex],button[e_EditorMenu.ImageIndex],
    button[e_EditorMenu.X]+xPos,button[e_EditorMenu.Y]+yPos,
    button[e_EditorMenu.Width]/sprite_get_width(button[e_EditorMenu.SpriteIndex]),
    button[e_EditorMenu.Height]/sprite_get_height(button[e_EditorMenu.SpriteIndex]),image_angle,image_blend,image_alpha);
    var midX = button[e_EditorMenu.X]+xPos+(button[e_EditorMenu.Width]/2);
    var midY = button[e_EditorMenu.Y]+yPos+(button[e_EditorMenu.Height]/2);
    switch (name)
    {
        case "objects":
            var index = 0;
            switch (button[e_EditorMenu.Name])
            {
                default:
                    draw_set_color(c_black);
                    draw_text(midX,midY,button[e_EditorMenu.Name]);
                    draw_set_color(c_white);
                break;
                case "OBJImage":
                    if (7 &lt; array_length_1d(vals))
                    {
                        draw_sprite_part(vals[7],0,0,0,48,48,midX-16,midY-16);
                    }
                break;
                case "Color":index++;
                case "Alpha":index++;
                case "Angle":index++;
                case "YScale":index++;
                case "XScale":index++;
                case "Y":index++;
                case "X":
                
                
                
                //case "XFlip":
                //case "YFlip":
                
                
                
                    draw_set_color(c_black);
                    if (index &lt; array_length_1d(vals))
                    {
                        draw_text(midX,midY,button[e_EditorMenu.Name] + "#" + string(vals[index]));
                    }
                    else
                    {
                        draw_text(midX,midY,button[e_EditorMenu.Name] + "#???");
                    }
                    draw_set_color(c_white);
                break;
            }
        break;
    }
    
}
draw_set_valign(fa_top);
draw_set_halign(fa_left);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///no.

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
