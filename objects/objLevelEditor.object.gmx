<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
List of known unsupported features:
Tile id retention.
Tile name retention.
Tile locked retention.
Tile alpha (if this even applies, not sure if it's unused in 1.4).
Any and all view/background properties (These will retain the original level's).

*/
/* List of currently unsupported features that need to be setup.
-Object editing window (Containing ability to change scale, code, blend, etc.)
-Code editing interface (Have it launch GMLCE and just wait out frames until it's closed).
-

*/
depth = -1000;

global.newLine = "
";
event_inherited();

var fileHandler = file_text_open_read(get_open_filename("GMS1.4 Room Files|*.room.gmx",""));//working_directory + "lvlCopyThisRoom.room.gmx");
//file_text_read_string("lvlCopyThisRoom.room.gmx");

maxLineCount = 0;
lineCount = 0;
while (!file_text_eof(fileHandler))
{
    /*if (iteration &gt;= processRate &amp;&amp; processRate &gt;= 0)
    {
        // To prevent lag, stop loading after a set number of frames.
        completion = 0.25 * min(1, lineCount / maxLineCount);
        exit;
    }*/
    //iteration += iterationRate;
    var lineS = file_text_readln(fileHandler);
    maxLineCount++;
    lines[lineCount++] = lineS;

    // hash repeatedly to avoid large string handling.
    //hashString = md5_string_utf8(hashString + global.newLine + lineS);
}

file_text_close(fileHandler);
//processedFile = true;
//processedLines = false;
//startParseCompletion = 0.25 * min(1, lineCount / maxLineCount);

//Defining this all here in the unlikely event one of these is empty.
code_str = "";//The room CC.
prop_background = -1;//Background (non-tiled)
prop_inst = -1;//Instances.
prop_tile = -1;//Tiles.

project_objects = ds_map_create();
project_sprites = ds_map_create();
project_backgrounds = ds_map_create();
project_backgrounds_reverseLookup = ds_map_create();//Used specifically to reverse-lookup on export.
project_backgrounds_tileData = ds_map_create();

prop_bg_n = 0;
prop_inst_n = 0;
prop_tile_n = 0;

event_user(0);//editor_ParseRoomData();


for (var i = 0; i &lt; array_length_1d(prop_inst); i++)
{
    var instance = prop_inst[i]
    
    with (instance_create(real(instance[? "x"]),real(instance[? "y"]),objEditorObject))
    {
        objName = instance[? "objName"];
        instanceName = instance[? "name"];
        locked = real(instance[? "locked"]);
        code = instance[? "code"];
        image_xscale = real(instance[? "scaleX"]);
        image_yscale = real(instance[? "scaleY"]);
        image_blend = real(instance[? "colour"])-4278190080;//Minus the alpha value. Note: Even though GMS stores it with an alpha value, you can never define alpha colors in GMS's Room editor.
//        image_alpha = real(instance[? "colour"])-image_blend;//The newly seperated color value.
        image_angle = real(instance[? "rotation"]);
        with (other)
        {
            parseAsset("object",other.objName);
        }
        var objData = other.project_objects[? objName];
        depth = objData[1];
        var spr = other.project_sprites[? objData[0]];
        if (spr != "")
        {
            sprite_index = spr;
        }
        else
        {
            sprite_index = sprButton;
        }
    }
}
for (var i = 0; i &lt; array_length_1d(prop_tile); i++)
{
    var tile = prop_tile[i]
    parseAsset("tile",tile[? "bgName"]);
    var tileID = tile_add(project_backgrounds[? tile[? "bgName"]], real(tile[? "xo"]), real(tile[? "yo"]), real(tile[? "w"]), real(tile[? "h"]), real(tile[? "x"]), real(tile[? "y"]), real(tile[? "depth"]));
    tile_set_blend(tileID, real(tile[? "colour"])-4278190080);
    tile_set_scale(tileID, real(tile[? "scaleX"]), real(tile[? "scaleY"]));
    
    
}
//show_debug_message(c_white);


mouse_x_previous = mouse_x;
mouse_y_previous = mouse_y;
mouse_motionX = 0;
mouse_motionY = 0;
zoomLevel = 1;



selectedObjects = ds_list_create();
selectedObjects_XOffset = ds_list_create();
selectedObjects_YOffset = ds_list_create();
holdingObject = false;
holdingType = 0;
holding_ScaleX = 1;
holding_ScaleY = 1;

gridsnap_X = 16;
gridsnap_Y = 16;
showGrid = true;
eventName = "";

cancelRoomTouch = false;

//Chooser modifies a currently selected tile(s), Selector sets a tile to add with.
tileChooser_Left = -1;
tileChooser_Top = -1;
tileChooser_Width = -1;
tileChooser_Height = -1;

tileSelector_Left = 0;
tileSelector_Top = 0;
tileSelector_Width = 16;
tileSelector_Height = 16;
tileSelector_BG = 0;
tileSelector_Depth = 1000000;

multiselectX = -1;
multiselectY = -1;

enum editModes{
    OBJECTS,
    TILES,
    ROOMSETTINGS
    
}

editingMode = editModes.OBJECTS;
var menus = makeArray(
    
    editorCreateMenu("objects","right",(view_hview/2),300,300+128,make_color_rgb(0,120,248),make_color_rgb(60,188,242)),
    editorCreateMenu("tiles","right",(view_hview/2),600,768,make_color_rgb(0,120,248),make_color_rgb(60,188,242)),
    editorCreateMenu("room","right",(view_hview/2),300,300+128,make_color_rgb(0,120,248),make_color_rgb(60,188,242)),
    //editorCreateMenu("tileSelector","left",(view_hview/2),600,768,make_color_rgb(0,120,248),make_color_rgb(60,188,242)),
    editorCreateMenu("mode","bottom",(view_wview/2),500,200,make_color_rgb(0,120,248),make_color_rgb(60,188,242)),
    editorCreateMenu("tileSelector","left",(view_hview/2),512,512,make_color_rgb(0,120,248),make_color_rgb(60,188,242))
    
    
    );
with (menus[0])
{
    depth -= 10;
}
with (menus[1])
{
    visible = false;
}
with (menus[2])
{
    visible = false;
}

event_user(1);

eventName = "mode-Objects";

display_set_gui_maximise();

global.mouseLeftPressed = false;
global.mouseRightPressed = false;
global.mouseMiddlePressed = false;
global.mouseLeft = false;
global.mouseRight = false;
global.mouseMiddle = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure to destroy lists/maps created here later.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.mouseLeftPressed = mouse_check_button_pressed(mb_left);
global.mouseRightPressed = mouse_check_button_pressed(mb_right);
global.mouseMiddlePressed = mouse_check_button_pressed(mb_middle);
global.mouseLeft = mouse_check_button(mb_left);
global.mouseRight = mouse_check_button(mb_right);
global.mouseMiddle = mouse_check_button(mb_middle);
global.mouseLeftReleased = mouse_check_button_released(mb_left);
global.mouseRightReleased = mouse_check_button_released(mb_right);
global.mouseMiddleReleased = mouse_check_button_released(mb_middle);



cancelRoomTouch = false;
with (objEditorMenu)
{
    if (visible)
    {
        event_user(1);
    }
}
if (cancelRoomTouch)
{
    exit;
}
if (mouse_wheel_up() || mouse_wheel_down())
{
    var pX = (mouse_x-view_xview)/view_wview;//Fractional point of where the mouse is atm.
    var pY = (mouse_y-view_yview)/view_hview;
    //show_debug_message(pX);
    //show_debug_message(pY);
    var mousePower = .125;
    if (mouse_wheel_up())
    {
        mousePower *= -1;
    }
    if (zoomLevel+mousePower &gt; 0)
    {
        zoomLevel += mousePower;
        view_wview = view_wport*zoomLevel;
        view_hview = view_hport*zoomLevel;
        
        view_xview = (mouse_x-view_wview*pX);
        view_yview = (mouse_y-view_hview*pY);
        
        //view_xview += window_view_mouse_get_x(0)-pX;
        //view_yview += window_view_mouse_get_y(0)-pY;
        //show_debug_message(window_view_mouse_get_x(0)-pX);
        //view_xview = lerp(pX,(mouse_x-view_wview/2),.1*max(1,mousePower));
        //view_yview = lerp(pY,(mouse_y-view_hview/2),.1*max(1,mousePower));
    
    }
}
if (global.mouseMiddle)
{
    if (keyboard_check(vk_shift))
    {
        if (global.mouseMiddlePressed)
        {
            multiselectX = mouse_x;
            multiselectY = mouse_y;
        }
    }
    else
    {
        multiselectX = -1;
        multiselectY = -1;
        mouse_motionX = mouse_x-mouse_x_previous;
        mouse_motionY = mouse_y-mouse_y_previous;
        
        view_xview -= mouse_motionX;
        view_yview -= mouse_motionY;
    }
}
else if (global.mouseMiddleReleased)
{
    if (multiselectX &gt;= 0)
    {
        
        
        switch (editingMode)
        {
            case editModes.OBJECTS:
                var tmps = makeArray(global.mouseLeftPressed,
                global.mouseRightPressed,
                global.mouseMiddlePressed,
                global.mouseLeft,
                global.mouseRight,
                global.mouseMiddle,
                global.mouseLeftReleased,
                global.mouseRightReleased,
                global.mouseMiddleReleased);
                
                
                global.mouseLeftPressed=true;
                global.mouseRightPressed=false;
                global.mouseMiddlePressed=false;
                global.mouseLeft=false;
                global.mouseRight=false;
                global.mouseMiddle=false;
                global.mouseLeftReleased=false;
                global.mouseRightReleased=false;
                global.mouseMiddleReleased=false;
                with (objEditorObject)
                {
                    if (collision_rectangle(other.multiselectX,other.multiselectY,mouse_x,mouse_y,id,true,false))
                    {
                        var X = bboxGetXCenter();
                        var Y = bboxGetYCenter();
                        with (other)
                        {
                            editorPerformEditingActions(true,true,X,Y);
                        }
                    }
                }
                var t = 0;
                global.mouseLeftPressed=tmps[t++];
                global.mouseRightPressed=tmps[t++];
                global.mouseMiddlePressed=tmps[t++];
                global.mouseLeft=tmps[t++];
                global.mouseRight=tmps[t++];
                global.mouseMiddle=tmps[t++];
                global.mouseLeftReleased=tmps[t++];
                global.mouseRightReleased=tmps[t++];
                global.mouseMiddleReleased=tmps[t++];
            break;
            case editModes.TILES:
                var mX;
                var mY;
                var eX = mouse_x;
                var eY = mouse_y;
                /*with (instance_create(multiselectX,multiselectY,objDummy))
                {
                    move_snap(gridsnap_X,gridsnap_Y);
                    mX = x;
                    mY = y;//tile_set_position(selectedObject,x,y);
                    x = eX;
                    y = eY;
                    move_snap(gridsnap_X,gridsnap_Y);
                    eX = x;
                    eY = y;
                    instance_destroy();
                }*/
                var tiles = findTileRectangle(multiselectX,multiselectY,mouse_x,mouse_y,1);
                if (array_length_1d(tiles) &gt; 0)
                {
                    ds_list_clear(selectedObjects);
                    ds_list_clear(selectedObjects_XOffset);
                    ds_list_clear(selectedObjects_YOffset);
                    for (var i = 0; i &lt; array_length_1d(tiles); i++)
                    {
                        ds_list_add(selectedObjects,tiles[i]);
                        ds_list_add(selectedObjects_XOffset,tile_get_x(tiles[i])-mouse_x);
                        ds_list_add(selectedObjects_XOffset,tile_get_y(tiles[i])-mouse_y);
                    }
                    global.mouseLeft=true;
                }
                /*for (var i = mX; i &lt; eX; i += 16)
                {
                    for (var j = mY; j &lt; eY; j+= 16)
                    {
                        
                        
                        //editorPerformEditingActions(true,true,i+8,j+8);
                    }
                }*/
            break;
        }
        
    }
}

mouse_x_previous = mouse_x-mouse_motionX;
mouse_y_previous = mouse_y-mouse_motionY;


editorPerformEditingActions();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reserved for button usage.
//show_debug_message(eventName);
var counter = 0;
var mouseX = window_mouse_get_x();
var mouseY = window_mouse_get_y();
if (global.mouseLeftPressed)
{
    switch (eventName)
    {
    
        default:
            show_debug_message(eventName);
        break;
        case "objects-X":
        case "objects-Y":
        case "objects-XScale":
        case "objects-YScale":
        case "objects-XFlip":
        case "objects-YFlip":
        case "objects-Angle":
        case "objects-Alpha":
        case "objects-OBJImage":
        case "objects-Color":
            if (ds_list_size(selectedObjects &lt;= 1))
            {
                var selectedObject = ds_list_find_value(selectedObjects,0);
                with (selectedObject)
                {
                    switch (other.eventName)
                    {
                        case "objects-X":
                            x = real(get_string("Set X value",string(x)));
                        break;
                        case "objects-Y":
                            y = real(get_string("Set Y value",string(y)));
                        break;
                        case "objects-XScale":
                            image_xscale = real(get_string("Set XScale value",string(image_xscale)));
                        break;
                        case "objects-YScale":
                            image_yscale = real(get_string("Set YScale value",string(image_yscale)));
                        break;
                        case "objects-XFlip":
                            image_xscale *= -1;
                        break;
                        case "objects-YFlip":
                            image_yscale *= -1;
                        break;
                        case "objects-Angle":
                            image_angle = real(get_string("Set Image Angle value",string(image_angle)));
                        break;
                        case "objects-Alpha":
                            image_alpha = real(get_string("Set Image Alpha value",string(image_alpha)));
                        break;
                        case "objects-OBJImage":break;
                        case "objects-Color":
                            image_angle = real(get_string("Set Image Color value (integer form)",string(image_blend)));
                        break;
                    }
                }
            }
        
        break;
        case "tiles-TileChooser":
            var AX;
            var AY;
            with (other)
            {
                var butt = buttons[array_length_1d(buttons)-1];
                AX = butt[e_EditorMenu.X]+xPos;
                AY = butt[e_EditorMenu.Y]+yPos;
            }
            var mX;
            var mY;
            with (instance_create(mouseX-AX-(gridsnap_X*.5),mouseY-AY-(gridsnap_Y*.5),objDummy))
            {
                move_snap(other.gridsnap_X,other.gridsnap_Y);
                mX = x;
                mY = y;//tile_set_position(selectedObject,x,y);
                instance_destroy();
            }
            
            tileChooser_Left = mX;
            tileChooser_Top = mY;
            tileChooser_Width = 16;
            tileChooser_Height = 16;
            /*var size = ds_list_size(selectedObjects);
            if (size &gt;= 1)
            {
                for (var i = 0; i &lt; size; i++)
                {
                    var tile = ds_list_find_value(selectedObjects,i);
                    var newLeft = 
                }
            }*/
        break;
        case "tileSelector-Selector":
            var AX;
            var AY;
            with (other)
            {
                var butt = buttons[0];
                AX = butt[e_EditorMenu.X]+xPos;
                AY = butt[e_EditorMenu.Y]+yPos;
            }
            var mX;
            var mY;
            with (instance_create(mouseX-AX-(gridsnap_X*.5),mouseY-AY-(gridsnap_Y*.5),objDummy))
            {
                move_snap(other.gridsnap_X,other.gridsnap_Y);
                mX = x;
                mY = y;//tile_set_position(selectedObject,x,y);
                instance_destroy();
            }
            
            tileSelector_Left = mX;
            tileSelector_Top = mY;
            tileSelector_Width = 16;
            tileSelector_Height = 16;
            /*var size = ds_list_size(selectedObjects);
            if (size &gt;= 1)
            {
                for (var i = 0; i &lt; size; i++)
                {
                    var tile = ds_list_find_value(selectedObjects,i);
                    var newLeft = 
                }
            }*/
        break;
        case "mode-Room":
            counter++;
        case "mode-Tiles":
            counter++;
        case "mode-Objects":
            var nam = string_lower(stringSubstring(eventName,6));
            show_debug_message(nam);
            /*for (var i = 0; i &lt; 3; i++)
            {
                menus[i].visible = counter == i;
            }*/

            with (objEditorMenu)
            {
                if ((name == "objects" || name == "tiles" || name == "room"))
                {
                    visible = name == nam;
                }
            }
            editingMode = counter;
            ds_list_clear(selectedObjects);
            ds_list_clear(selectedObjects_XOffset);
            ds_list_clear(selectedObjects_YOffset);
            holdingObject = false;
            holdingType = 0;
            holding_ScaleX = 1;
            holding_ScaleY = 1;
        break;
        case "tileSelector-DepthSelect":
            var res = get_string("Choose the depth to switch to.",tileSelector_Depth);
            if (string(real(res)) == res)
            {
                tileSelector_Depth = real(res);
            }
        break;
    }
}
if (global.mouseLeft)
{
    switch (eventName)
    {
        case "tiles-TileChooser":
            var AX;
            var AY;
            with (other)
            {
                var butt = buttons[array_length_1d(buttons)-1];
                AX = butt[e_EditorMenu.X]+xPos;
                AY = butt[e_EditorMenu.Y]+yPos;
            }
            
            var tW = mouseX-AX-tileChooser_Left;
            var tH = mouseY-AY-tileChooser_Top;
            tW = round(tW/16)*16;
            tH = round(tH/16)*16;
            if (tW &gt; 0)
            {
                tileChooser_Width = tW;
            }
            if (tH &gt; 0)
            {
                tileChooser_Height = tH;
            }
            
            
            var size = ds_list_size(selectedObjects);
            if (size &gt;= 1)
            {
                for (var i = 0; i &lt; size; i++)
                {
                    var tile = ds_list_find_value(selectedObjects,i);
                    tile_set_region(tile,tileChooser_Left,tileChooser_Top,tileChooser_Width,tileChooser_Height);
                }
            }
        break;
        case "tileSelector-Selector":
            var AX;
            var AY;
            with (other)
            {
                var butt = buttons[0];
                AX = butt[e_EditorMenu.X]+xPos;
                AY = butt[e_EditorMenu.Y]+yPos;
            }
            
            var tW = mouseX-AX-tileSelector_Left;
            var tH = mouseY-AY-tileSelector_Top;
            tW = round(tW/16)*16;
            tH = round(tH/16)*16;
            if (tW &gt; 0)
            {
                tileSelector_Width = tW;
            }
            if (tH &gt; 0)
            {
                tileSelector_Height = tH;
            }
        break;
    }
}
else
{
    switch (eventName)
    {
        case "objects-XScale":
        case "objects-YScale":
        //case "objects-YScale":
            var diff = mouse_wheel_up() + mouse_wheel_down()*-1;
            if (diff != 0)
            {
                if (ds_list_size(selectedObjects &lt;= 1))
                {
                    var selectedObject = ds_list_find_value(selectedObjects,0);
                    with (selectedObject)
                    {
                        if (other.eventName == "objects-YScale")
                        {
                            image_yscale += diff;
                        }
                        else
                        {
                            image_xscale += diff;
                        }
                    }
                }
            }
        break;
        case "tileSelector-BGSelect":
            var diff = mouse_wheel_up() + mouse_wheel_down()*-1;
            show_debug_message(tileSelector_BG);
            if (diff != 0)
            {
                if (background_exists(tileSelector_BG+diff))
                {
                    tileSelector_BG += diff;
                }
                //tileSelector_BG
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Export
//for (var i = 0; i &lt; array_length_1d(prop_tile))

var objectString = "";
//for (var i = 0; i &lt; array_length_1d(prop_inst); i++)
//{
//    var inst = prop_inst[i];
var i = 0;
with (objEditorObject)
{
    var stringOut = '&lt;instance objName="' + objName + '" x="' + string(x) + '" y="' + string(y) + 
    '" name="' + instanceName + '" locked="' + string(locked) + '" code="' + code + 
    '" scaleX="' + string(image_xscale) + '"scaleY="' + string(image_yscale) + 
    'colour="' + string(image_blend+4278190080) + '" rotation="' + string(image_angle) + '"/&gt;';
    objectString += stringOut + global.newLine;
    
}   

var tileString = "";

var allTiles = tile_get_ids();

for (var i = 0; i &lt; array_length_1d(allTiles); i++)
{
    var thisTile = allTiles[i];
    var tileOut = '&lt;tile bgName="' + project_backgrounds_reverseLookup[? string(tile_get_background(thisTile))] 
    + '" x="' + string(tile_get_x(thisTile)) + '" y="' + string(tile_get_y(thisTile)) 
    + '" w="' + string(tile_get_width(thisTile)) + '" h="' + string(tile_get_height(thisTile)) 
    + '" xo="' + string(tile_get_left(thisTile)) + '" yo="' + string(tile_get_top(thisTile)) 
    + '" id="inst_' + string(dec_to_hex(i,8)) + '" depth="' + string(tile_get_depth(thisTile)) 
    + '" locked="0" colour = "' + string(tile_get_blend(thisTile) + 4278190080) 
    + '" scaleX="' + string(tile_get_xscale(thisTile)) + '" scaleY="' + string(tile_get_yscale(thisTile)) 
    + '"/&gt;';
    tileString += tileOut + global.newLine;
    i++;
}
show_debug_message(objectString);
show_debug_message(tileString);


//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// editor_ParseRoomData
var line = 0;
while (line &lt; maxLineCount)
{
    var text = lines[line++];
    
    text = stringSubstring(text, string_pos("&lt;", text));
    
    // room properties
    if (stringStartsWith(text, "&lt;width&gt;"))
        room_set_width(lvlEditor,real(string_digits(text)));
    if (stringStartsWith(text, "&lt;height&gt;"))
        room_set_height(lvlEditor,real(string_digits(text)));
    if (stringStartsWith(text, "&lt;colour&gt;"))
        background_color = real(string_digits(text));
    if (stringStartsWith(text, "&lt;code&gt;"))
    {
        code_str = text + global.newLine;
        while (line &lt; lineCount)
        {
            //iteration+= iterationRate;
            if (string_pos("&lt;/code&gt;", code_str) != 0)
                break;
            code_str += lines[line++] + global.newLine;
        }
        continue;
    }
    
    // backgrounds
    if (stringStartsWith(text, "&lt;background "))
    {
        prop_background[prop_bg_n++] = xmlParseTag(text);
    }
    
    // views [not implemented]
    
    // instances
    if (stringStartsWith(text, "&lt;instance "))
    {
        prop_inst[prop_inst_n++] = xmlParseTag(text);
    }
    
    // tiles
    if (stringStartsWith(text, "&lt;tile "))
    {
        prop_tile[prop_tile_n++] = xmlParseTag(text);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showGrid)
{
    for (var i = floor(view_xview/16)*16; i &lt; view_xview+view_wview; i += gridsnap_X)
    {
        draw_line(i,view_yview,i,view_yview+view_hview);
    }
    for (var j = floor(view_yview/16)*16; j &lt; view_yview+view_hview; j += gridsnap_Y)
    {
        draw_line(view_xview,j,view_xview+view_wview,j);
    }
}
for (var i = 0; i &lt; ds_list_size(selectedObjects); i++)
{
    var selectedObject = ds_list_find_value(selectedObjects,i);
    switch (editingMode)
    {
        case editModes.OBJECTS:
            with (selectedObject)
            {
                /*draw_set_color(c_white-background_color);//c_ltgray);
                draw_rectangle(bbox_left-1,bbox_top-1,bbox_right+1,bbox_bottom+1,false);
                draw_set_color(c_white);
                other.depth = depth+1;*/
                //var oB = image_blend;
                //image_blend = c_yellow;
                
                draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true);
                image_alpha = .5;
                
                
                d3d_set_fog(true,c_yellow,0,0);
                draw_self();//draw_sprite(sprite_index,image_index,x,y);
                d3d_set_fog(false,c_white,0,0);
                image_alpha = 1;
                //image_blend = oB;
            }
        break;
        case editModes.TILES:
            var bb_left = tile_get_x(selectedObject);
            var bb_top = tile_get_y(selectedObject);
            var bb_right = bb_left+tile_get_width(selectedObject);
            var bb_bottom = bb_top+tile_get_height(selectedObject);
            var back = tile_get_background(selectedObject);
            var left = tile_get_left(selectedObject);
            var top = tile_get_top(selectedObject);
            var W = tile_get_width(selectedObject);
            var H = tile_get_height(selectedObject);
            var XS = tile_get_xscale(selectedObject);
            var YS = tile_get_yscale(selectedObject);
            var col = tile_get_blend(selectedObject);
            var al = tile_get_alpha(selectedObject);
            
            draw_rectangle(bb_left-1,bb_top-1,bb_right-1,bb_bottom-1,true);//For some reason we gotta subtract by 1.
            //image_alpha = .5;
            
            
            d3d_set_fog(true,c_yellow,0,0);
            draw_background_part_ext(back,left,top,W,H,bb_left,bb_top,XS,YS,col,al*.5);//draw_self();//draw_sprite(sprite_index,image_index,x,y);
            d3d_set_fog(false,c_white,0,0);
            image_alpha = 1;
        break;
    }
    //depth = 0;
}
if (mouse_check_button(mb_middle) &amp;&amp; keyboard_check(vk_shift))
{
    draw_set_alpha(.5);
    draw_set_color(c_purple);
    draw_rectangle(multiselectX,multiselectY,mouse_x,mouse_y,false);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_rectangle(multiselectX,multiselectY,mouse_x,mouse_y,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
